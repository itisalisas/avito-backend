// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/storage/interfaces.go -destination=internal/generated/mocks/mock_interfaces.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"
	time "time"

	dto "github.com/itisalisas/avito-backend/internal/generated/dto"
	models "github.com/itisalisas/avito-backend/internal/models"
	types "github.com/oapi-codegen/runtime/types"
	gomock "go.uber.org/mock/gomock"
)

// MockProductRepositoryInterface is a mock of ProductRepositoryInterface interface.
type MockProductRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockProductRepositoryInterfaceMockRecorder is the mock recorder for MockProductRepositoryInterface.
type MockProductRepositoryInterfaceMockRecorder struct {
	mock *MockProductRepositoryInterface
}

// NewMockProductRepositoryInterface creates a new mock instance.
func NewMockProductRepositoryInterface(ctrl *gomock.Controller) *MockProductRepositoryInterface {
	mock := &MockProductRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepositoryInterface) EXPECT() *MockProductRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockProductRepositoryInterface) AddProduct(ctx context.Context, product *dto.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockProductRepositoryInterfaceMockRecorder) AddProduct(ctx, product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockProductRepositoryInterface)(nil).AddProduct), ctx, product)
}

// BeginTx mocks base method.
func (m *MockProductRepositoryInterface) BeginTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, opts)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockProductRepositoryInterfaceMockRecorder) BeginTx(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockProductRepositoryInterface)(nil).BeginTx), ctx, opts)
}

// Commit mocks base method.
func (m *MockProductRepositoryInterface) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockProductRepositoryInterfaceMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockProductRepositoryInterface)(nil).Commit))
}

// DeleteProductById mocks base method.
func (m *MockProductRepositoryInterface) DeleteProductById(ctx context.Context, productId types.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductById", ctx, productId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductById indicates an expected call of DeleteProductById.
func (mr *MockProductRepositoryInterfaceMockRecorder) DeleteProductById(ctx, productId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductById", reflect.TypeOf((*MockProductRepositoryInterface)(nil).DeleteProductById), ctx, productId)
}

// GetLastProduct mocks base method.
func (m *MockProductRepositoryInterface) GetLastProduct(ctx context.Context, receptionId types.UUID) (*dto.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastProduct", ctx, receptionId)
	ret0, _ := ret[0].(*dto.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastProduct indicates an expected call of GetLastProduct.
func (mr *MockProductRepositoryInterfaceMockRecorder) GetLastProduct(ctx, receptionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastProduct", reflect.TypeOf((*MockProductRepositoryInterface)(nil).GetLastProduct), ctx, receptionId)
}

// Rollback mocks base method.
func (m *MockProductRepositoryInterface) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockProductRepositoryInterfaceMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockProductRepositoryInterface)(nil).Rollback))
}

// MockReceptionRepositoryInterface is a mock of ReceptionRepositoryInterface interface.
type MockReceptionRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockReceptionRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockReceptionRepositoryInterfaceMockRecorder is the mock recorder for MockReceptionRepositoryInterface.
type MockReceptionRepositoryInterfaceMockRecorder struct {
	mock *MockReceptionRepositoryInterface
}

// NewMockReceptionRepositoryInterface creates a new mock instance.
func NewMockReceptionRepositoryInterface(ctrl *gomock.Controller) *MockReceptionRepositoryInterface {
	mock := &MockReceptionRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockReceptionRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceptionRepositoryInterface) EXPECT() *MockReceptionRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddReception mocks base method.
func (m *MockReceptionRepositoryInterface) AddReception(ctx context.Context, reception *dto.Reception) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReception", ctx, reception)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReception indicates an expected call of AddReception.
func (mr *MockReceptionRepositoryInterfaceMockRecorder) AddReception(ctx, reception any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReception", reflect.TypeOf((*MockReceptionRepositoryInterface)(nil).AddReception), ctx, reception)
}

// BeginTx mocks base method.
func (m *MockReceptionRepositoryInterface) BeginTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, opts)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockReceptionRepositoryInterfaceMockRecorder) BeginTx(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockReceptionRepositoryInterface)(nil).BeginTx), ctx, opts)
}

// CloseLastReception mocks base method.
func (m *MockReceptionRepositoryInterface) CloseLastReception(ctx context.Context, receptionId types.UUID) (*dto.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseLastReception", ctx, receptionId)
	ret0, _ := ret[0].(*dto.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseLastReception indicates an expected call of CloseLastReception.
func (mr *MockReceptionRepositoryInterfaceMockRecorder) CloseLastReception(ctx, receptionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseLastReception", reflect.TypeOf((*MockReceptionRepositoryInterface)(nil).CloseLastReception), ctx, receptionId)
}

// Commit mocks base method.
func (m *MockReceptionRepositoryInterface) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockReceptionRepositoryInterfaceMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockReceptionRepositoryInterface)(nil).Commit))
}

// GetLastReceptionByPvzId mocks base method.
func (m *MockReceptionRepositoryInterface) GetLastReceptionByPvzId(ctx context.Context, pvzId types.UUID) (*dto.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastReceptionByPvzId", ctx, pvzId)
	ret0, _ := ret[0].(*dto.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastReceptionByPvzId indicates an expected call of GetLastReceptionByPvzId.
func (mr *MockReceptionRepositoryInterfaceMockRecorder) GetLastReceptionByPvzId(ctx, pvzId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastReceptionByPvzId", reflect.TypeOf((*MockReceptionRepositoryInterface)(nil).GetLastReceptionByPvzId), ctx, pvzId)
}

// Rollback mocks base method.
func (m *MockReceptionRepositoryInterface) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockReceptionRepositoryInterfaceMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockReceptionRepositoryInterface)(nil).Rollback))
}

// MockPvzRepositoryInterface is a mock of PvzRepositoryInterface interface.
type MockPvzRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPvzRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockPvzRepositoryInterfaceMockRecorder is the mock recorder for MockPvzRepositoryInterface.
type MockPvzRepositoryInterfaceMockRecorder struct {
	mock *MockPvzRepositoryInterface
}

// NewMockPvzRepositoryInterface creates a new mock instance.
func NewMockPvzRepositoryInterface(ctrl *gomock.Controller) *MockPvzRepositoryInterface {
	mock := &MockPvzRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockPvzRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPvzRepositoryInterface) EXPECT() *MockPvzRepositoryInterfaceMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockPvzRepositoryInterface) BeginTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, opts)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockPvzRepositoryInterfaceMockRecorder) BeginTx(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockPvzRepositoryInterface)(nil).BeginTx), ctx, opts)
}

// Commit mocks base method.
func (m *MockPvzRepositoryInterface) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockPvzRepositoryInterfaceMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockPvzRepositoryInterface)(nil).Commit))
}

// CreatePvz mocks base method.
func (m *MockPvzRepositoryInterface) CreatePvz(ctx context.Context, pvz *dto.PVZ) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePvz", ctx, pvz)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePvz indicates an expected call of CreatePvz.
func (mr *MockPvzRepositoryInterfaceMockRecorder) CreatePvz(ctx, pvz any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePvz", reflect.TypeOf((*MockPvzRepositoryInterface)(nil).CreatePvz), ctx, pvz)
}

// GetAllPVZs mocks base method.
func (m *MockPvzRepositoryInterface) GetAllPVZs(ctx context.Context) ([]dto.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPVZs", ctx)
	ret0, _ := ret[0].([]dto.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPVZs indicates an expected call of GetAllPVZs.
func (mr *MockPvzRepositoryInterfaceMockRecorder) GetAllPVZs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPVZs", reflect.TypeOf((*MockPvzRepositoryInterface)(nil).GetAllPVZs), ctx)
}

// GetPvzList mocks base method.
func (m *MockPvzRepositoryInterface) GetPvzList(ctx context.Context, startTime, endTime *time.Time, page, limit uint64) ([]*models.ExtendedPvz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPvzList", ctx, startTime, endTime, page, limit)
	ret0, _ := ret[0].([]*models.ExtendedPvz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPvzList indicates an expected call of GetPvzList.
func (mr *MockPvzRepositoryInterfaceMockRecorder) GetPvzList(ctx, startTime, endTime, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPvzList", reflect.TypeOf((*MockPvzRepositoryInterface)(nil).GetPvzList), ctx, startTime, endTime, page, limit)
}

// Rollback mocks base method.
func (m *MockPvzRepositoryInterface) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockPvzRepositoryInterfaceMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockPvzRepositoryInterface)(nil).Rollback))
}

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface.
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface.
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance.
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockUserRepositoryInterface) BeginTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, opts)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockUserRepositoryInterfaceMockRecorder) BeginTx(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockUserRepositoryInterface)(nil).BeginTx), ctx, opts)
}

// Commit mocks base method.
func (m *MockUserRepositoryInterface) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockUserRepositoryInterfaceMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockUserRepositoryInterface)(nil).Commit))
}

// CreateUser mocks base method.
func (m *MockUserRepositoryInterface) CreateUser(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryInterfaceMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepositoryInterface)(nil).CreateUser), ctx, user)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepositoryInterface) GetUserByEmail(ctx context.Context, email types.Email) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetUserByEmail), ctx, email)
}

// Rollback mocks base method.
func (m *MockUserRepositoryInterface) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockUserRepositoryInterfaceMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockUserRepositoryInterface)(nil).Rollback))
}

// MockTransactionStorage is a mock of TransactionStorage interface.
type MockTransactionStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionStorageMockRecorder
	isgomock struct{}
}

// MockTransactionStorageMockRecorder is the mock recorder for MockTransactionStorage.
type MockTransactionStorageMockRecorder struct {
	mock *MockTransactionStorage
}

// NewMockTransactionStorage creates a new mock instance.
func NewMockTransactionStorage(ctrl *gomock.Controller) *MockTransactionStorage {
	mock := &MockTransactionStorage{ctrl: ctrl}
	mock.recorder = &MockTransactionStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionStorage) EXPECT() *MockTransactionStorageMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockTransactionStorage) BeginTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, opts)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockTransactionStorageMockRecorder) BeginTx(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockTransactionStorage)(nil).BeginTx), ctx, opts)
}

// Commit mocks base method.
func (m *MockTransactionStorage) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionStorageMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransactionStorage)(nil).Commit))
}

// Rollback mocks base method.
func (m *MockTransactionStorage) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionStorageMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransactionStorage)(nil).Rollback))
}
